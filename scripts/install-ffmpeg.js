import { FFmpegUtils, SystemUtils } from '../src/utils/system.js';
import logger from '../src/utils/logger.js';
import { UPLOAD_CONFIG } from '../src/utils/constants.js';
import fs from 'fs-extra';

class FFmpegInstaller {
  constructor() {
    this.ffmpegUtils = new FFmpegUtils();
    this.systemUtils = new SystemUtils();
    this.systemInfo = this.systemUtils.getSystemInfo();
  }

  async checkFFmpeg() {
    const result = await this.ffmpegUtils.checkFFmpeg();
    
    if (result.installed) {
      // Verificar codecs MKV
      const codecCheck = await this.ffmpegUtils.checkCodecs();
      result.codecs = codecCheck;
      result.mkvReady = codecCheck.available.includes('hevc') || codecCheck.available.includes('h265');
    }
    
    return result;
  }

  async attemptInstallation() {
    console.log(`üé¨ Detectado: ${this.systemInfo.platform} ${this.systemInfo.arch}`);
    console.log('üìã Tentando instala√ß√£o autom√°tica do FFmpeg...\n');
    
    const result = await this.ffmpegUtils.attemptAutoInstall();
    
    if (result.success) {
      console.log(`‚úÖ FFmpeg instalado com sucesso via ${result.manager}!`);
      console.log(`üìã Vers√£o: ${result.version}`);
      return true;
    } else {
      console.log('‚ùå Falha na instala√ß√£o autom√°tica.');
      
      if (result.attempts?.length > 0) {
        console.log('\nüîç Tentativas realizadas:');
        result.attempts.forEach(attempt => {
          const status = attempt.success ? '‚úÖ' : '‚ùå';
          console.log(`   ${status} ${attempt.manager}: ${attempt.error || 'OK'}`);
        });
      }
      
      console.log('\nüìã Instala√ß√£o manual necess√°ria:');
      this.showManualInstructions();
      return false;
    }
  }

  showManualInstructions() {
    const instructions = this.ffmpegUtils.getManualInstructions();
    
    console.log('\n' + instructions.title);
    console.log('‚ïê'.repeat(50));
    
    instructions.steps.forEach(step => {
      if (step.trim() === '') {
        console.log('');
      } else {
        console.log(step);
      }
    });
  }

  async install() {
    console.log('üé¨ Instalador Autom√°tico do FFmpeg - Friend Cine MKV\n');
    console.log('‚ïê'.repeat(60));
    
    // Exibir informa√ß√µes do sistema
    console.log(`üñ•Ô∏è  Sistema: ${this.systemInfo.platform} ${this.systemInfo.arch}`);
    console.log(`‚ö° CPUs: ${this.systemInfo.cpus} cores`);
    console.log(`üíæ RAM: ${Math.round(this.systemInfo.totalMemory / 1024 / 1024 / 1024)}GB`);
    console.log(`üü¢ Node.js: ${this.systemInfo.nodeVersion}\n`);
    
    // Verificar se j√° est√° instalado
    console.log('üîç Verificando FFmpeg...');
    const check = await this.checkFFmpeg();
    
    if (check.installed) {
      console.log('‚úÖ FFmpeg j√° est√° instalado!');
      console.log(`üìã Vers√£o: ${check.version}`);
      
      if (check.codecs) {
        console.log(`üé¨ Codecs MKV: ${check.codecs.available.length}/${check.codecs.available.length + check.codecs.missing.length}`);
        console.log(`üìä Dispon√≠veis: ${check.codecs.available.join(', ')}`);
        
        if (check.mkvReady) {
          console.log('üéâ Sistema pronto para convers√£o MKV H.265!');
        } else {
          console.log('‚ö†Ô∏è H.265/HEVC n√£o dispon√≠vel - convers√µes limitadas');
        }
      }
      
      return true;
    }
    
    console.log('‚ùå FFmpeg n√£o encontrado. Iniciando instala√ß√£o...\n');
    
    // Tentar instala√ß√£o
    const success = await this.attemptInstallation();
    
    if (success) {
      console.log('\nüîÑ Verificando instala√ß√£o final...');
      await new Promise(resolve => setTimeout(resolve, 3000)); // Aguardar 3s
      
      const finalCheck = await this.checkFFmpeg();
      if (finalCheck.installed) {
        console.log('üéâ FFmpeg instalado e funcionando!');
        console.log(`üìã Vers√£o: ${finalCheck.version}`);
        
        if (finalCheck.mkvReady) {
          console.log('‚ú® Sistema MKV completo - convers√£o H.265/FLAC dispon√≠vel!');
        } else {
          console.log('‚ö†Ô∏è FFmpeg instalado, mas sem H.265 - funcionalidade limitada');
        }
        
        return true;
      } else {
        console.log('‚ö†Ô∏è Instala√ß√£o aparentemente bem-sucedida, mas FFmpeg n√£o foi encontrado.');
        console.log('üí° Poss√≠veis solu√ß√µes:');
        console.log('   - Reinicie o terminal/IDE');
        console.log('   - Reinicie o computador');
        console.log('   - Verifique se foi adicionado ao PATH');
        return false;
      }
    }
    
    return false;
  }

  async checkStorageStructure() {
    console.log('\nüìÅ Verificando estrutura de storage...');
    
    const storagePaths = Object.values(UPLOAD_CONFIG.PATHS);
    let allExists = true;
    
    for (const storagePath of storagePaths) {
      try {
        await fs.ensureDir(storagePath);
        console.log(`‚úÖ ${storagePath}`);
      } catch (error) {
        console.log(`‚ùå ${storagePath} - Erro: ${error.message}`);
        allExists = false;
      }
    }
    
    return allExists;
  }
}

// Script principal
async function main() {
  try {
    const installer = new FFmpegInstaller();
    const args = process.argv.slice(2);
    
    if (args.includes('--check') || args.includes('-c')) {
      // Apenas verificar se est√° instalado
      const check = await installer.checkFFmpeg();
      
      if (check.installed) {
        console.log('‚úÖ FFmpeg instalado:', check.version);
        
        if (check.codecs) {
          const codecStatus = check.mkvReady ? 'üé¨ MKV Ready' : '‚ö†Ô∏è Limited';
          console.log(`${codecStatus} - Codecs: ${check.codecs.available.join(', ')}`);
        }
        
        process.exit(0);
      } else {
        console.log('‚ùå FFmpeg n√£o encontrado');
        process.exit(1);
      }
    } else {
      // Instalar
      const success = await installer.install();
      
      if (success) {
        console.log('\nüéØ Pr√≥ximos Passos:');
        console.log('   1. npm start              # Iniciar sistema completo');
        console.log('   2. npm run check-system   # Testar tudo');
        console.log('   3. npm run test:codec     # Testar codecs no navegador');
        console.log('\n‚ú® Friend Cine MKV est√° pronto para convers√£o H.265/FLAC!');
      } else {
        console.log('\nüîß FFmpeg n√£o foi instalado.');
        console.log('   ‚úÖ O sistema ainda funcionar√° com:');
        console.log('      - Reprodu√ß√£o de v√≠deos compat√≠veis');
        console.log('      - Upload de arquivos MKV existentes');
        console.log('      - Funcionalidades de sala e chat');
        console.log('\nüí° Para habilitar convers√£o autom√°tica:');
        console.log('   - Instale FFmpeg manualmente');
        console.log('   - Execute: npm run check-ffmpeg');
      }
      
      process.exit(success ? 0 : 1);
    }
  } catch (error) {
    console.error('‚ùå Erro no instalador:', error.message);
    logger.error('FFmpeg installer error', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { FFmpegInstaller }; 