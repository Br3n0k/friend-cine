#!/usr/bin/env node

import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs-extra';
import path from 'path';

const execAsync = promisify(exec);

console.log('üîç Friend Cine - Teste do Sistema\n');
console.log('‚ïê'.repeat(50));

// 1. Teste do FFmpeg
console.log('\nüé¨ 1. Testando FFmpeg...');
try {
  const { stdout } = await execAsync('ffmpeg -version');
  const version = stdout.split('\n')[0];
  console.log('‚úÖ FFmpeg encontrado:', version);
} catch (error) {
  console.log('‚ùå FFmpeg n√£o encontrado no PATH');
  console.log('üí° Reinicie o terminal/IDE ap√≥s a instala√ß√£o');
}

// 2. Verificar arquivos essenciais
console.log('\nüìÅ 2. Verificando arquivos do projeto...');
const requiredFiles = [
  'server/index.js',
  'server/video-converter.js', 
  'src/pages/index.astro',
  'src/pages/room.astro',
  'package.json'
];

for (const file of requiredFiles) {
  if (await fs.exists(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - FALTANDO`);
  }
}

// 3. Verificar depend√™ncias
console.log('\nüì¶ 3. Verificando node_modules...');
const deps = [
  'node_modules/express',
  'node_modules/socket.io',
  'node_modules/fluent-ffmpeg',
  'node_modules/astro'
];

for (const dep of deps) {
  if (await fs.exists(dep)) {
    console.log(`‚úÖ ${dep.split('/')[1]}`);
  } else {
    console.log(`‚ùå ${dep.split('/')[1]} - Execute: npm install`);
  }
}

// 4. Verificar pasta de v√≠deos
console.log('\nüé• 4. Verificando pasta de v√≠deos...');
const videosDir = 'public/videos';
if (await fs.exists(videosDir)) {
  const files = await fs.readdir(videosDir);
  const videoFiles = files.filter(f => !f.startsWith('.'));
  console.log(`‚úÖ Pasta exists: ${videoFiles.length} arquivo(s)`);
  
  if (videoFiles.length > 0) {
    console.log('üìπ Arquivos encontrados:');
    videoFiles.slice(0, 3).forEach(file => {
      console.log(`   - ${file}`);
    });
    if (videoFiles.length > 3) {
      console.log(`   ... e mais ${videoFiles.length - 3} arquivo(s)`);
    }
  }
} else {
  console.log('‚ùå Pasta public/videos n√£o encontrada');
}

// 5. Teste de portas
console.log('\nüåê 5. Verificando portas...');
try {
  // Testar se algo est√° rodando nas portas
  const testPort = async (port, service) => {
    try {
      const response = await fetch(`http://localhost:${port}/api/health`);
      console.log(`‚úÖ ${service} (porta ${port}) - ATIVO`);
    } catch {
      console.log(`‚ö†Ô∏è ${service} (porta ${port}) - INATIVO`);
    }
  };
  
  await testPort(4000, 'Backend');
  // N√£o vamos testar 3000 porque pode n√£o ter /api/health
} catch (error) {
  console.log('‚ö†Ô∏è N√£o foi poss√≠vel testar conectividade');
}

// 6. Comandos recomendados
console.log('\nüöÄ 6. Status e Comandos:');
console.log('');

const ffmpegStatus = await fs.exists('C:/ffmpeg') || 
                    await fs.exists('C:/ProgramData/chocolatey/lib/ffmpeg');

if (ffmpegStatus) {
  console.log('‚úÖ FFmpeg instalado - Convers√£o autom√°tica dispon√≠vel');
} else {
  console.log('‚ö†Ô∏è FFmpeg n√£o detectado - Apenas arquivos compat√≠veis');
}

console.log('\nüìã Para iniciar:');
console.log('   npm run dev:all');
console.log('\nüìã Para testar separadamente:');
console.log('   npm run dev:server    # Backend (porta 4000)');
console.log('   npm run dev           # Frontend (porta 3000)');

console.log('\n‚ú® Sistema pronto para uso!'); 