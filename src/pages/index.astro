---
import Layout from '../layouts/Layout.astro';
import ProcessingQueue from '../components/ProcessingQueue.astro';
---

<Layout title="Friend Cine MKV 2.0 - Cinema em Qualidade Master">
  <!-- Fila de Processamento Persistente -->
  <ProcessingQueue />
  
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Seção de Upload -->
    <div class="lg:col-span-1">
      <div class="glass-effect rounded-xl p-6">
        <h2 class="text-xl font-bold text-white mb-4 flex items-center">
          <i class="fas fa-upload mr-2 text-blue-400"></i>
          Upload de Vídeo MKV Master
        </h2>
        
        <!-- Info MKV -->
        <div class="bg-gradient-to-r from-blue-600/10 to-purple-600/10 rounded-lg p-4 mb-4 border border-blue-500/20">
          <div class="flex items-center mb-2">
            <i class="fas fa-star text-yellow-400 mr-2"></i>
            <span class="text-sm font-medium text-white">MKV Master Quality</span>
          </div>
          <div class="text-xs text-gray-300 space-y-1">
            <div>• <strong>Codec:</strong> H.265/HEVC + FLAC</div>
            <div>• <strong>Qualidades:</strong> 4K, 1080p, 720p, 480p</div>
            <div>• <strong>Auto-conversão:</strong> Versões Web (MP4/WebM)</div>
          </div>
        </div>
        
        <div id="upload-area" class="border-2 border-dashed border-gray-400 rounded-lg p-8 text-center cursor-pointer hover:border-blue-400 transition-colors">
          <i class="fas fa-cloud-upload-alt text-4xl text-gray-400 mb-4"></i>
          <p class="text-gray-300 mb-2">Clique para selecionar ou arraste um vídeo</p>
          <p class="text-sm text-gray-500">MP4, WebM, AVI, MOV, <strong class="text-blue-400">MKV</strong> (Máx: 5GB)</p>
          <input type="file" id="video-upload" accept="video/*,.mkv" class="hidden">
        </div>
        
        <div id="upload-progress" class="hidden mt-4">
          <div class="bg-gray-700 rounded-full h-2">
            <div id="progress-bar" class="bg-blue-500 h-2 rounded-full" style="width: 0%"></div>
          </div>
          <p id="upload-status" class="text-sm text-gray-300 mt-2">Uploading...</p>
        </div>
      </div>
    </div>

    <!-- Lista de Vídeos -->
    <div class="lg:col-span-2">
      <div class="glass-effect rounded-xl p-6">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-bold text-white flex items-center">
            <i class="fas fa-video mr-2 text-green-400"></i>
            Biblioteca de Vídeos
          </h2>
          
          <!-- Badge MKV Master -->
          <div class="flex items-center space-x-2">
            <span class="px-3 py-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white text-xs rounded-full font-medium">
              <i class="fas fa-crown mr-1"></i>
              MKV Master
            </span>
            <span class="px-2 py-1 bg-gray-700 text-gray-300 text-xs rounded-full">
              H.265/HEVC
            </span>
          </div>
        </div>
        
        <div id="videos-list" class="space-y-3">
          <!-- Videos will be loaded here -->
        </div>
        
        <div id="videos-loading" class="text-center py-8">
          <i class="fas fa-spinner fa-spin text-2xl text-gray-400"></i>
          <p class="text-gray-300 mt-2">Carregando vídeos...</p>
        </div>

        <div id="no-videos" class="text-center py-8 hidden">
          <i class="fas fa-film text-4xl text-gray-400 mb-4"></i>
          <p class="text-gray-300">Nenhum vídeo encontrado</p>
          <p class="text-sm text-gray-500">Faça upload de um vídeo MKV para começar com qualidade master</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Salas Ativas -->
  <div class="mt-6">
    <div class="glass-effect rounded-xl p-6">
      <h2 class="text-xl font-bold text-white mb-4 flex items-center">
        <i class="fas fa-users mr-2 text-purple-400"></i>
        Salas Ativas
      </h2>
      
      <div id="rooms-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <!-- Rooms will be loaded here -->
      </div>
      
      <div id="no-rooms" class="text-center py-8">
        <i class="fas fa-door-open text-4xl text-gray-400 mb-4"></i>
        <p class="text-gray-300">Nenhuma sala ativa</p>
        <p class="text-sm text-gray-500">Crie uma sala selecionando um vídeo</p>
      </div>
    </div>
  </div>

  <!-- Informações Técnicas MKV -->
  <div class="mt-6">
    <div class="glass-effect rounded-xl p-4">
      <div class="flex items-center justify-between mb-3">
        <h3 class="text-md font-bold text-white flex items-center">
          <i class="fas fa-info-circle mr-2 text-blue-400"></i>
          Friend Cine MKV 2.0.0 - Especificações Técnicas
        </h3>
        <span class="text-xs text-gray-400">Pipeline de Qualidade Master</span>
      </div>
      
      <div class="grid grid-cols-2 md:grid-cols-4 gap-3 text-xs">
        <!-- Codec de Vídeo -->
        <div class="bg-blue-600/10 rounded-lg p-3 border border-blue-500/20">
          <div class="text-blue-400 font-medium mb-1">
            <i class="fas fa-video mr-1"></i>Vídeo
          </div>
          <div class="text-gray-300">H.265/HEVC</div>
          <div class="text-gray-400">4K • 1080p • 720p • 480p</div>
        </div>

        <!-- Codec de Áudio -->
        <div class="bg-purple-600/10 rounded-lg p-3 border border-purple-500/20">
          <div class="text-purple-400 font-medium mb-1">
            <i class="fas fa-volume-up mr-1"></i>Áudio
          </div>
          <div class="text-gray-300">FLAC Lossless</div>
          <div class="text-gray-400">AAC • Opus • MP3</div>
        </div>

        <!-- Auto-Conversão -->
        <div class="bg-green-600/10 rounded-lg p-3 border border-green-500/20">
          <div class="text-green-400 font-medium mb-1">
            <i class="fas fa-sync-alt mr-1"></i>Auto-Conversão
          </div>
          <div class="text-gray-300">MP4 • WebM</div>
          <div class="text-gray-400">Thumbnails • Legendas</div>
        </div>

        <!-- Limite -->
        <div class="bg-yellow-600/10 rounded-lg p-3 border border-yellow-500/20">
          <div class="text-yellow-400 font-medium mb-1">
            <i class="fas fa-hdd mr-1"></i>Capacidade
          </div>
          <div class="text-gray-300">Até 5GB</div>
          <div class="text-gray-400">FFmpeg • Socket.io</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para criar sala -->
  <div id="create-room-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="glass-effect rounded-xl p-6 max-w-md w-full mx-4">
      <h3 class="text-lg font-bold text-white mb-4">Criar Nova Sala</h3>
      
      <div class="mb-4">
        <label class="block text-gray-300 text-sm font-medium mb-2">Nome da Sala</label>
        <input type="text" id="room-name" placeholder="Digite um nome para a sala..." 
               class="w-full p-3 bg-gray-800 text-white rounded-lg border border-gray-600 focus:border-blue-500 focus:outline-none">
      </div>
      
      <div class="mb-6">
        <label class="block text-gray-300 text-sm font-medium mb-2">Seu Nome</label>
        <input type="text" id="username" placeholder="Como você quer ser chamado?" 
               class="w-full p-3 bg-gray-800 text-white rounded-lg border border-gray-600 focus:border-blue-500 focus:outline-none">
      </div>
      
      <div class="flex space-x-4">
        <button id="cancel-room" class="flex-1 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
          Cancelar
        </button>
        <button id="create-room" class="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
          Criar Sala
        </button>
      </div>
    </div>
  </div>

  <script>
    // @ts-nocheck
    let selectedVideoFile = null;
    let socket = null;

    // Upload de arquivo
    const uploadArea = document.getElementById('upload-area');
    const videoUpload = document.getElementById('video-upload');
    const uploadProgress = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const uploadStatus = document.getElementById('upload-status');

    uploadArea.addEventListener('click', () => videoUpload.click());
    
    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('border-blue-400');
    });
    
    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('border-blue-400');
    });
    
    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('border-blue-400');
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        handleFileUpload(files[0]);
      }
    });

    videoUpload.addEventListener('change', (e) => {
      if (e.target.files.length > 0) {
        handleFileUpload(e.target.files[0]);
      }
    });

    async function handleFileUpload(file) {
      const formData = new FormData();
      formData.append('video', file);
      
      uploadProgress.classList.remove('hidden');
      
      try {
        const response = await fetch('http://localhost:4000/api/upload', {
          method: 'POST',
          body: formData
        });
        
        if (response.ok) {
          const result = await response.json();
          uploadStatus.textContent = 'Upload concluído!';
          progressBar.style.width = '100%';
          
          // Iniciar monitoramento se há processamento
          if (result.isProcessing) {
            const fileId = result.filename.split('_')[0]; // Extrair fileId do nome
            
            // Mostrar na fila de processamento
            window.processingQueue?.showProcessingJob(fileId, result.originalName);
            
            initializeSocket(); // Conectar WebSocket para progresso
          }
          
          setTimeout(() => {
            uploadProgress.classList.add('hidden');
            window.loadVideos();
          }, 1000);
        } else {
          throw new Error('Erro no upload');
        }
      } catch (error) {
        uploadStatus.textContent = 'Erro no upload: ' + error.message;
      }
    }

    // Inicializar WebSocket para progresso
    function initializeSocket() {
      if (socket) return; // Já conectado
      
      socket = io('http://localhost:4000');
      
      socket.on('connect', () => {
        console.log('✅ WebSocket conectado para monitoramento de progresso');
      });
      
      socket.on('video-progress', (progressData) => {
        console.log('📊 Progresso recebido:', progressData);
        
        // Atualizar fila de processamento
        window.processingQueue?.updateJobProgress(progressData);
      });
      
      socket.on('disconnect', () => {
        console.log('❌ WebSocket desconectado');
        socket = null;
      });
      
      socket.on('connect_error', (error) => {
        console.error('❌ Erro de conexão WebSocket:', error);
      });
    }

    // Carregar vídeos (função global)
    window.loadVideos = async function loadVideos() {
      const videosLoading = document.getElementById('videos-loading');
      const videosList = document.getElementById('videos-list');
      const noVideos = document.getElementById('no-videos');
      
      try {
        console.log('🔄 Carregando vídeos...');
        const response = await fetch('http://localhost:4000/api/videos');
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const videos = await response.json();
        console.log('✅ Vídeos carregados:', videos);
        
        videosLoading.classList.add('hidden');
        
        if (videos.length === 0) {
          noVideos.classList.remove('hidden');
          return;
        }
        
        noVideos.classList.add('hidden');
        videosList.innerHTML = videos.map(video => {
          const isConverted = video.type === 'converted';
          const isOriginal = video.type === 'original';
          const isOptimized = video.isOptimized || false;
          const needsConversion = isOriginal && video.name.match(/\.(mkv|avi|mov|wmv|flv)$/i);
          
          return `
          <div class="video-card group flex items-center justify-between p-4 ${isConverted ? 'bg-blue-900/20 border-l-4 border-blue-500' : 'bg-gray-800'} rounded-lg hover:bg-gray-700 transition-all duration-300 relative overflow-hidden">
            <div class="flex items-center space-x-4 flex-1">
              <div class="w-16 h-12 ${isConverted ? 'bg-blue-600' : 'bg-gray-600'} rounded flex items-center justify-center relative">
                <i class="fas fa-play text-white"></i>
                ${isConverted ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-blue-400 rounded-full" title="Versão Convertida"></div>' : ''}
                ${needsConversion ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-yellow-500 rounded-full" title="Precisa conversão"></div>' : ''}
                ${(isOriginal && !needsConversion) ? '<div class="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full" title="Compatível"></div>' : ''}
              </div>
              <div class="flex-1">
                <div class="flex items-center space-x-2 mb-1">
                  <h3 class="text-white font-medium truncate">${video.name}</h3>
                </div>
                <div class="flex items-center space-x-2 mb-2">
                  ${isConverted ? '<span class="px-2 py-1 bg-blue-600/50 text-blue-200 text-xs rounded-full font-medium">CONVERTIDO</span>' : ''}
                  ${isOptimized ? '<span class="px-2 py-1 bg-green-600/50 text-green-200 text-xs rounded-full font-medium">OTIMIZADO</span>' : ''}
                </div>
                <p class="text-gray-400 text-sm">${formatFileSize(video.size)} • ${new Date(video.uploadDate).toLocaleDateString('pt-BR')}</p>
                ${isConverted ? '<p class="text-blue-300 text-xs mt-1"><i class="fas fa-rocket mr-1"></i>Alta qualidade web • Múltiplas trilhas de áudio</p>' : ''}
                ${needsConversion ? '<p class="text-yellow-400 text-xs mt-1"><i class="fas fa-exclamation-triangle mr-1"></i>Requer conversão para melhor compatibilidade</p>' : ''}
              </div>
            </div>
            
            <!-- Botões com animação -->
            <div class="video-actions flex space-x-2 transform translate-x-0 transition-transform duration-300 group-hover:translate-x-0">
              ${needsConversion ? `
                <button onclick="convertVideo('${video.id}')" 
                        class="convert-btn px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-200 active:scale-95 opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0">
                  <i class="fas fa-cogs mr-1"></i>Converter
                </button>
              ` : ''}
              <button onclick="openCreateRoomModal('${video.id}')" 
                      class="create-btn px-4 py-2 ${isConverted ? 'bg-blue-600 hover:bg-blue-700' : 'bg-purple-600 hover:bg-purple-700'} text-white rounded-lg transition-all duration-200 active:scale-95 opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0">
                <i class="fas fa-plus mr-2"></i>Criar Sala
              </button>
              <button onclick="deleteVideo('${video.id}')" 
                      class="delete-btn px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-200 active:scale-95 opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </div>
        `;
        }).join('');
      } catch (error) {
        console.error('Erro ao carregar vídeos:', error);
        videosLoading.innerHTML = '<p class="text-red-400">Erro ao carregar vídeos</p>';
      }
    }

    // Carregar salas ativas
    async function loadRooms() {
      try {
        console.log('🔄 Carregando salas...');
        const response = await fetch('http://localhost:4000/api/rooms');
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const rooms = await response.json();
        console.log('✅ Salas carregadas:', rooms);
        
        const roomsList = document.getElementById('rooms-list');
        const noRooms = document.getElementById('no-rooms');
        
        if (rooms.length === 0) {
          noRooms.classList.remove('hidden');
          roomsList.innerHTML = '';
          return;
        }
        
        noRooms.classList.add('hidden');
        roomsList.innerHTML = rooms.map(room => `
          <div class="glass-effect rounded-lg p-4 hover:bg-opacity-20 transition-all cursor-pointer"
               onclick="joinRoom('${room.id}')">
            <div class="flex items-center justify-between mb-2">
              <h3 class="text-white font-medium truncate">${room.id}</h3>
              <span class="text-xs text-gray-400 flex items-center">
                <i class="fas fa-users mr-1"></i>${room.userCount}
              </span>
            </div>
            <p class="text-gray-400 text-sm truncate">${room.videoFile}</p>
            <div class="flex items-center mt-2">
              <span class="w-2 h-2 rounded-full ${room.isPlaying ? 'bg-green-400' : 'bg-red-400'} mr-2"></span>
              <span class="text-xs text-gray-400">${room.isPlaying ? 'Reproduzindo' : 'Pausado'}</span>
            </div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Erro ao carregar salas:', error);
      }
    }

    // Modal para criar sala
    window.openCreateRoomModal = function(videoFile) {
      console.log('🎬 Abrindo modal para criar sala com vídeo:', videoFile);
      selectedVideoFile = videoFile;
      document.getElementById('create-room-modal').classList.remove('hidden');
      document.getElementById('create-room-modal').classList.add('flex');
    }

    window.closeCreateRoomModal = function() {
      document.getElementById('create-room-modal').classList.add('hidden');
      document.getElementById('create-room-modal').classList.remove('flex');
      selectedVideoFile = null;
    }

    document.getElementById('cancel-room').addEventListener('click', window.closeCreateRoomModal);

    document.getElementById('create-room').addEventListener('click', async () => {
      const roomName = document.getElementById('room-name').value.trim();
      const username = document.getElementById('username').value.trim();
      
      if (!roomName || !username) {
        alert('Por favor, preencha todos os campos');
        return;
      }
      
      try {
        const response = await fetch('http://localhost:4000/api/rooms', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            videoFile: selectedVideoFile,
            roomName: roomName
          })
        });
        
        if (response.ok) {
          const result = await response.json();
          window.closeCreateRoomModal();
          
          // Redirecionar para a sala
          const params = new URLSearchParams({
            room: result.roomId,
            username: username
          });
          window.location.href = `/room?${params.toString()}`;
        } else {
          throw new Error('Erro ao criar sala');
        }
      } catch (error) {
        console.error('Erro ao criar sala:', error);
        alert('Erro ao criar sala: ' + error.message);
      }
    });

    window.joinRoom = function(roomId) {
      const username = prompt('Digite seu nome:');
      if (username) {
        const params = new URLSearchParams({
          room: roomId,
          username: username
        });
        window.location.href = `/room?${params.toString()}`;
      }
    }

    // Converter vídeo
    window.convertVideo = async function(filename) {
      try {
        const convertBtn = event.target;
        convertBtn.disabled = true;
        convertBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Convertendo...';
        
        console.log(`🔄 Iniciando conversão de: ${filename}`);
        
        const response = await fetch(`http://localhost:4000/api/convert/${filename}`, {
          method: 'POST'
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('✅ Conversão concluída:', result);
          
          // Recarregar lista de vídeos
          await window.loadVideos();
          
          // Mostrar notificação de sucesso
          window.showNotification('Conversão concluída!', 'success');
        } else {
          throw new Error('Erro na conversão');
        }
        
      } catch (error) {
        console.error('❌ Erro na conversão:', error);
        window.showNotification('Erro na conversão: ' + error.message, 'error');
        
        // Restaurar botão
        const convertBtn = event.target;
        convertBtn.disabled = false;
        convertBtn.innerHTML = '<i class="fas fa-cogs mr-1"></i>Converter';
      }
    }

    // Deletar vídeo
    window.deleteVideo = async function(filename) {
      if (!confirm(`Tem certeza que deseja apagar o vídeo "${filename}"?\n\nEsta ação não pode ser desfeita.`)) {
        return;
      }

      try {
        const deleteBtn = event.target;
        deleteBtn.disabled = true;
        deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
        
        console.log(`🗑️ Deletando vídeo: ${filename}`);
        
        const response = await fetch(`http://localhost:4000/api/videos/${filename}`, {
          method: 'DELETE'
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('✅ Vídeo deletado:', result);
          
          // Recarregar lista de vídeos
          await window.loadVideos();
          await loadRooms(); // Recarregar salas também
          
          // Mostrar notificação de sucesso
          window.showNotification('Vídeo removido com sucesso!', 'success');
        } else {
          const error = await response.json();
          throw new Error(error.error || 'Erro ao deletar vídeo');
        }
        
      } catch (error) {
        console.error('❌ Erro ao deletar:', error);
        window.showNotification('Erro ao deletar: ' + error.message, 'error');
        
        // Restaurar botão
        const deleteBtn = event.target;
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
      }
    }

    // Mostrar notificação
    window.showNotification = function(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${
        type === 'success' ? 'bg-green-600' : 
        type === 'error' ? 'bg-red-600' : 'bg-blue-600'
      }`;
      notification.innerHTML = `
        <div class="flex items-center">
          <i class="fas ${
            type === 'success' ? 'fa-check' : 
            type === 'error' ? 'fa-exclamation-triangle' : 'fa-info'
          } mr-2"></i>
          ${message}
        </div>
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 5000);
    }

    function formatFileSize(bytes) {
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      if (bytes === 0) return '0 Bytes';
      const i = Math.floor(Math.log(bytes) / Math.log(1024));
      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }

    // Carregar dados iniciais
    window.loadVideos();
    loadRooms();
    
    // Atualizar salas a cada 10 segundos (reduzido para evitar spam)
    setInterval(loadRooms, 10000);
  </script>
</Layout>
