---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Friend Cine - Sala de Cinema">
  <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-140px)]">
    <!-- Player de V√≠deo -->
    <div class="lg:col-span-3">
      <div class="glass-effect rounded-xl p-6 h-full">
        <div class="flex items-center justify-between mb-4">
          <h2 id="room-title" class="text-xl font-bold text-white flex items-center">
            <i class="fas fa-film mr-2 text-purple-400"></i>
            Carregando sala...
          </h2>
          <div class="flex items-center space-x-4">
            <div id="user-count" class="flex items-center text-gray-300">
              <i class="fas fa-users mr-2"></i>
              <span>0 usu√°rios</span>
            </div>
            <button id="leave-room" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              <i class="fas fa-sign-out-alt mr-2"></i>Sair
            </button>
          </div>
        </div>
        
        <div class="relative bg-black rounded-lg overflow-hidden" style="height: calc(100% - 80px);">
          <video id="video-player" class="video-js vjs-default-skin" controls preload="metadata" 
                 data-setup='{"responsive": true, "fluid": true, "muted": false, "volume": 0.8}'>
            <p class="vjs-no-js">
              Para assistir este v√≠deo, por favor
              <a href="https://videojs.com/html5-video-support/" target="_blank">
                habilite JavaScript
              </a>, e considere atualizar para um navegador que
              <a href="https://videojs.com/html5-video-support/" target="_blank">
                suporte v√≠deo HTML5
              </a>.
            </p>
          </video>
          
          <!-- Overlay de status -->
          <div id="sync-status" class="absolute top-4 right-4 px-3 py-2 bg-black bg-opacity-70 rounded-lg text-white text-sm hidden">
            <i class="fas fa-sync-alt fa-spin mr-2"></i>Sincronizando...
          </div>
        </div>
      </div>
    </div>

    <!-- Painel Lateral -->
    <div class="lg:col-span-1 flex flex-col">
      <!-- Usu√°rios Online -->
      <div class="glass-effect rounded-xl p-4 mb-4">
        <h3 class="text-lg font-semibold text-white mb-3 flex items-center">
          <i class="fas fa-users mr-2 text-blue-400"></i>
          Usu√°rios Online
        </h3>
        <div id="users-list" class="space-y-2 max-h-32 overflow-y-auto">
          <!-- Users will be loaded here -->
        </div>
      </div>

      <!-- Chat -->
      <div class="glass-effect rounded-xl p-4 flex-1 flex flex-col">
        <h3 class="text-lg font-semibold text-white mb-3 flex items-center">
          <i class="fas fa-comments mr-2 text-green-400"></i>
          Chat
        </h3>
        
        <div id="chat-messages" class="flex-1 overflow-y-auto chat-container mb-4 space-y-2">
          <!-- Chat messages will appear here -->
        </div>
        
        <div class="flex space-x-2">
          <input type="text" id="chat-input" placeholder="Digite sua mensagem..." 
                 class="flex-1 p-2 bg-gray-800 text-white rounded-lg border border-gray-600 focus:border-blue-500 focus:outline-none text-sm">
          <button id="send-message" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Controles de Audio e Legendas -->
  <div id="audio-subtitle-controls" class="fixed bottom-4 left-4 space-x-2 hidden">
    <button id="audio-track-btn" class="px-3 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700 transition-colors">
      <i class="fas fa-volume-up mr-2"></i>√Åudio
    </button>
    <button id="subtitle-track-btn" class="px-3 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700 transition-colors">
      <i class="fas fa-closed-captioning mr-2"></i>Legendas
    </button>
  </div>

  <!-- Menu de sele√ß√£o de faixas -->
  <div id="track-menu" class="fixed bottom-16 left-4 bg-gray-800 rounded-lg p-4 hidden">
    <div id="audio-tracks" class="mb-4">
      <h4 class="text-white font-medium mb-2">Faixas de √Åudio</h4>
      <div id="audio-tracks-list" class="space-y-1">
        <!-- Audio tracks will appear here -->
      </div>
    </div>
    <div id="subtitle-tracks">
      <h4 class="text-white font-medium mb-2">Legendas</h4>
      <div id="subtitle-tracks-list" class="space-y-1">
        <!-- Subtitle tracks will appear here -->
      </div>
    </div>
  </div>

  <script>
    // @ts-nocheck
    // Vari√°veis globais
    let socket = null;
    let player = null;
    let roomId = null;
    let username = null;
    let isSeekingFromSync = false;

    // Fun√ß√£o principal que executa quando tudo est√° carregado
    function startApp() {
      console.log('üé¨ Iniciando Friend Cine Room...');
      console.log('üîç Verificando depend√™ncias...');
      console.log('- Socket.io dispon√≠vel:', typeof io !== 'undefined');
      console.log('- Video.js dispon√≠vel:', typeof videojs !== 'undefined');
      
      // Extrair par√¢metros da URL
      const urlParams = new URLSearchParams(window.location.search);
      roomId = urlParams.get('room');
      username = urlParams.get('username');

      if (!roomId || !username) {
        alert('Par√¢metros inv√°lidos');
        window.location.href = '/';
        return;
      }

      console.log('üìã Sala:', roomId, '- Usu√°rio:', username);

      // Verificar se Socket.io est√° dispon√≠vel
      if (typeof io === 'undefined') {
        console.error('‚ùå Socket.io n√£o encontrado');
        console.log('üîÑ Tentando novamente em 2 segundos...');
        setTimeout(startApp, 2000);
        return;
      }

      // Conectar com o servidor
      connectToServer();
      
      // Configurar event listeners
      setupEventListeners();
    }

    function connectToServer() {
      console.log('üîå Conectando ao servidor...');
      socket = io('http://localhost:4000');

      socket.on('connect', () => {
        console.log('‚úÖ Conectado ao servidor');
        socket.emit('join-room', { roomId: roomId, username: username });
      });

      socket.on('room-state', async (roomState) => {
        console.log('üìä Estado da sala recebido:', roomState);
        
        // Atualizar t√≠tulo da sala
        document.getElementById('room-title').innerHTML = 
          `<i class="fas fa-film mr-2 text-purple-400"></i>${roomState.id}`;

        // Inicializar player se necess√°rio
        if (!player) {
          await initializePlayer(`/videos/${roomState.videoFile}`);
        }

        // Sincronizar estado do v√≠deo
        if (player) {
          isSeekingFromSync = true;
          player.currentTime(roomState.currentTime);
          
          if (roomState.isPlaying) {
            player.play();
          } else {
            player.pause();
          }
          
          setTimeout(() => { isSeekingFromSync = false; }, 500);
        }

        // Atualizar lista de usu√°rios
        updateUsersList(roomState.users);
        updateUserCount(roomState.userCount);

        // Carregar mensagens do chat
        loadChatMessages(roomState.chatMessages);
      });

      socket.on('video-sync', (data) => {
        if (player && !isSeekingFromSync) {
          showSyncStatus();
          isSeekingFromSync = true;
          
          player.currentTime(data.currentTime);
          
          if (data.action === 'play') {
            player.play();
          } else if (data.action === 'pause') {
            player.pause();
          }
          
          setTimeout(() => {
            isSeekingFromSync = false;
            hideSyncStatus();
          }, 500);
        }
      });

      socket.on('video-seek', (data) => {
        if (player && !isSeekingFromSync) {
          showSyncStatus();
          isSeekingFromSync = true;
          player.currentTime(data.currentTime);
          
          setTimeout(() => {
            isSeekingFromSync = false;
            hideSyncStatus();
          }, 500);
        }
      });

      socket.on('user-joined', (data) => {
        addChatMessage('Sistema', `${data.username} entrou na sala`, 'system');
        updateUserCount(data.userCount);
      });

      socket.on('user-left', (data) => {
        addChatMessage('Sistema', `${data.username} saiu da sala`, 'system');
        updateUserCount(data.userCount);
      });

      socket.on('new-chat-message', (message) => {
        addChatMessage(message.username, message.message, 'user');
      });

      socket.on('room-closed', (data) => {
        alert(`‚ö†Ô∏è ${data.message}`);
        console.log('üö™ Sala fechada pelo servidor:', data.message);
        
        // Redirecionar para p√°gina inicial
        setTimeout(() => {
          window.location.href = '/';
        }, 2000);
      });
    }

    async function initializePlayer(videoSrc) {
      console.log('üìπ Inicializando player com:', videoSrc);
      
      if (typeof videojs === 'undefined') {
        console.error('‚ùå Video.js n√£o encontrado');
        return;
      }

      // Dispose do player anterior se existir
      if (player) {
        console.log('üîÑ Removendo player anterior...');
        player.dispose();
        player = null;
      }

      player = videojs('video-player', {
        controls: true,
        responsive: true,
        fluid: true,
        playbackRates: [0.5, 1, 1.25, 1.5, 2],
        muted: false, // Garantir que n√£o est√° mutado
        volume: 0.8, // Volume padr√£o
        preload: 'metadata',
        plugins: {
          // Habilitar plugins para m√∫ltiplas trilhas
        }
      });

      // Criar m√∫ltiplas fontes para fallback
      const sources = await createVideoSources(videoSrc);
      console.log(`üé¨ Fontes de v√≠deo dispon√≠veis:`, sources);
      
      // Tentar carregar a melhor fonte dispon√≠vel
      for (const source of sources) {
        try {
          player.src(source);
          console.log(`üîÑ Tentando carregar: ${source.type} - ${source.src}`);
          break;
        } catch (error) {
          console.log(`‚ö†Ô∏è Falha ao carregar ${source.type}, tentando pr√≥ximo...`);
        }
      }

      // Event listeners do player
      player.on('play', () => {
        if (!isSeekingFromSync && socket) {
          socket.emit('video-action', {
            roomId: roomId,
            action: 'play',
            currentTime: player.currentTime()
          });
        }
      });

      player.on('pause', () => {
        if (!isSeekingFromSync && socket) {
          socket.emit('video-action', {
            roomId: roomId,
            action: 'pause',
            currentTime: player.currentTime()
          });
        }
      });

      player.on('seeked', () => {
        if (!isSeekingFromSync && socket) {
          socket.emit('seek-video', {
            roomId: roomId,
            currentTime: player.currentTime()
          });
        }
      });

      // Detectar erro de compatibilidade
      player.on('error', () => {
        const error = player.error();
        if (error && error.code === 4) { // MEDIA_ERR_SRC_NOT_SUPPORTED
          console.log('‚ùå Formato n√£o suportado, oferecendo solu√ß√µes...');
          showVideoCompatibilityError(videoSrc);
        }
      });

      player.ready(() => {
        console.log('‚úÖ Player est√° pronto');
        
        // Garantir que o √°udio n√£o est√° mutado
        if (player.muted()) {
          player.muted(false);
          console.log('üîä √Åudio desmutado');
        }
        
        // Definir volume se estiver muito baixo
        if (player.volume() < 0.1) {
          player.volume(0.8);
          console.log('üîä Volume ajustado para 80%');
        }
        
        console.log('üîä Status do √°udio:');
        console.log('  - Mutado:', player.muted());
        console.log('  - Volume:', player.volume());
        
        // Verificar faixas de √°udio
        setTimeout(() => {
          checkAndSetupAudioTracks();
        }, 1000);
      });

      // Fun√ß√£o para detectar e configurar m√∫ltiplas trilhas de √°udio
      function checkAndSetupAudioTracks() {
        const videoElement = player.el().querySelector('video');
        
        console.log('üîç Verificando trilhas de √°udio...');
        console.log('üìπ Informa√ß√µes do v√≠deo HTML5:');
        console.log('  - Dura√ß√£o:', videoElement.duration);
        console.log('  - Tem √°udio:', !videoElement.muted);
        console.log('  - Volume HTML5:', videoElement.volume);
        
        // For√ßar unmute no elemento HTML5
        videoElement.muted = false;
        videoElement.volume = 0.8;
        
        // Verificar Video.js audioTracks
        const vjsAudioTracks = player.audioTracks();
        console.log('üéµ Video.js faixas de √°udio:', vjsAudioTracks.length);
        
        // Verificar HTML5 audioTracks
        if (videoElement.audioTracks && videoElement.audioTracks.length > 0) {
          console.log('‚úÖ HTML5 faixas de √°udio encontradas:', videoElement.audioTracks.length);
          
          // Criar bot√£o de controle de √°udio personalizado
          createAudioTrackController(videoElement);
          
          // Listar todas as trilhas dispon√≠veis
          for (let i = 0; i < videoElement.audioTracks.length; i++) {
            const track = videoElement.audioTracks[i];
            console.log(`üéµ Trilha ${i + 1}:`, {
              id: track.id,
              kind: track.kind,
              label: track.label,
              language: track.language,
              enabled: track.enabled
            });
          }
          
        } else {
          console.log('‚ùå Nenhuma faixa de √°udio detectada');
          console.log('üí° Tentando m√©todo alternativo...');
          
          // M√©todo alternativo: verificar se h√° m√∫ltiplas trilhas via MediaSource
          checkAlternativeAudioMethod(videoElement);
        }
      }

      // Criar controle personalizado para troca de faixas de √°udio
      function createAudioTrackController(videoElement) {
        console.log('üéõÔ∏è Criando controle de faixas de √°udio...');
        
        // Remover controle anterior se existir
        const existingControl = document.getElementById('audio-track-control');
        if (existingControl) {
          existingControl.remove();
        }
        
        // Criar bot√£o de controle
        const controlButton = document.createElement('button');
        controlButton.id = 'audio-track-control';
        controlButton.className = 'absolute top-4 right-20 bg-purple-600/80 text-white px-3 py-2 rounded-lg hover:bg-purple-700 transition-all duration-200 flex items-center space-x-2 z-50';
        controlButton.innerHTML = '<i class="fas fa-language"></i> <span id="current-audio-lang">ENG</span>';
        
        // Menu dropdown
        const dropdown = document.createElement('div');
        dropdown.id = 'audio-dropdown';
        dropdown.className = 'absolute top-12 right-0 bg-gray-800 rounded-lg shadow-lg min-w-40 hidden z-50';
        
        // Popular op√ß√µes baseadas nas trilhas dispon√≠veis
        const tracks = videoElement.audioTracks;
        for (let i = 0; i < tracks.length; i++) {
          const track = tracks[i];
          const option = document.createElement('button');
          option.className = 'w-full text-left px-4 py-2 text-white hover:bg-gray-700 transition-colors';
          
          // Determinar idioma baseado no index (eng=0, por=1)
          const lang = i === 0 ? 'Ingl√™s' : 'Portugu√™s';
          const langCode = i === 0 ? 'ENG' : 'POR';
          
          option.innerHTML = `<i class="fas fa-volume-up mr-2"></i>${lang}`;
          option.onclick = () => switchAudioTrack(i, langCode);
          
          dropdown.appendChild(option);
        }
        
        controlButton.appendChild(dropdown);
        
        // Toggle dropdown
        controlButton.onclick = (e) => {
          e.stopPropagation();
          dropdown.classList.toggle('hidden');
        };
        
        // Fechar dropdown ao clicar fora
        document.addEventListener('click', () => {
          dropdown.classList.add('hidden');
        });
        
        // Adicionar ao player
        const playerContainer = player.el();
        playerContainer.style.position = 'relative';
        playerContainer.appendChild(controlButton);
      }

      // Trocar faixa de √°udio
      function switchAudioTrack(trackIndex, langCode) {
        console.log(`üîÑ Trocando para trilha ${trackIndex} (${langCode})`);
        
        const videoElement = player.el().querySelector('video');
        const tracks = videoElement.audioTracks;
        
        // Desabilitar todas as trilhas
        for (let i = 0; i < tracks.length; i++) {
          tracks[i].enabled = false;
        }
        
        // Habilitar trilha selecionada
        if (tracks[trackIndex]) {
          tracks[trackIndex].enabled = true;
          console.log(`‚úÖ Trilha ${trackIndex} (${langCode}) ativada`);
          
          // Atualizar UI
          const currentLangSpan = document.getElementById('current-audio-lang');
          if (currentLangSpan) {
            currentLangSpan.textContent = langCode;
          }
          
          // Fechar dropdown
          document.getElementById('audio-dropdown').classList.add('hidden');
        }
      }

      // M√©todo alternativo para detectar m√∫ltiplas trilhas
      function checkAlternativeAudioMethod(videoElement) {
        console.log('üîç M√©todo alternativo: verificando via MediaSource...');
        
        // Como sabemos que o arquivo tem 2 trilhas, criar controle manual
        setTimeout(() => {
          console.log('üí° Criando controle baseado em informa√ß√µes conhecidas...');
          createManualAudioController();
        }, 2000);
      }

      // Criar controle manual quando HTML5 n√£o detecta as trilhas
      function createManualAudioController() {
        console.log('üéõÔ∏è Criando controle manual de √°udio...');
        
        const controlButton = document.createElement('button');
        controlButton.id = 'audio-track-control';
        controlButton.className = 'absolute top-4 right-20 bg-purple-600/80 text-white px-3 py-2 rounded-lg hover:bg-purple-700 transition-all duration-200 flex items-center space-x-2 z-50';
        controlButton.innerHTML = '<i class="fas fa-language"></i> <span id="manual-audio-lang">ENG</span>';
        
        // Menu dropdown
        const dropdown = document.createElement('div');
        dropdown.id = 'manual-audio-dropdown';
        dropdown.className = 'absolute top-12 right-0 bg-gray-800 rounded-lg shadow-lg min-w-40 hidden z-50';
        
        // Op√ß√µes de idioma
        const languages = [
          { code: 'ENG', name: 'Ingl√™s', suffix: 'eng' },
          { code: 'POR', name: 'Portugu√™s', suffix: 'por' }
        ];
        
        languages.forEach(lang => {
          const option = document.createElement('button');
          option.className = 'w-full text-left px-4 py-2 text-white hover:bg-gray-700 transition-colors';
          option.innerHTML = `<i class="fas fa-volume-up mr-2"></i>${lang.name}`;
          option.onclick = () => switchToLanguageSpecificFile(lang.code, lang.suffix);
          dropdown.appendChild(option);
        });
        
        controlButton.appendChild(dropdown);
        
        // Toggle dropdown
        controlButton.onclick = (e) => {
          e.stopPropagation();
          dropdown.classList.toggle('hidden');
        };
        
        // Fechar dropdown ao clicar fora
        document.addEventListener('click', () => {
          dropdown.classList.add('hidden');
        });
        
        const playerContainer = player.el();
        playerContainer.style.position = 'relative';
        playerContainer.appendChild(controlButton);
      }

      // Trocar para arquivo espec√≠fico do idioma
      async function switchToLanguageSpecificFile(langCode, langSuffix) {
        console.log(`üîÑ Trocando para arquivo espec√≠fico: ${langCode}`);
        
        const currentSrc = player.currentSrc();
        const currentTime = player.currentTime();
        const wasPlaying = !player.paused();
        
        // Construir URL do arquivo espec√≠fico do idioma
        const baseName = currentSrc.split('/').pop().replace('.mp4', '');
        const languageSpecificUrl = currentSrc.replace('.mp4', `-${langSuffix}.mp4`);
        
        console.log(`üìÅ Arquivo atual: ${currentSrc}`);
        console.log(`üìÅ Arquivo destino: ${languageSpecificUrl}`);
        
        try {
          // Verificar se arquivo espec√≠fico existe
          const response = await fetch(languageSpecificUrl, { method: 'HEAD' });
          
          if (response.ok) {
            console.log(`‚úÖ Arquivo ${langCode} encontrado, trocando...`);
            
            // Pausar reprodu√ß√£o atual
            player.pause();
            
            // Trocar fonte do v√≠deo
            player.src({
              src: languageSpecificUrl,
              type: 'video/mp4'
            });
            
            // Aguardar carregamento e restaurar posi√ß√£o
            player.ready(() => {
              player.currentTime(currentTime);
              if (wasPlaying) {
                player.play();
              }
              
              // Atualizar UI
              const langSpan = document.getElementById('manual-audio-lang');
              if (langSpan) {
                langSpan.textContent = langCode;
              }
              
              console.log(`‚úÖ Trocado para ${langCode} na posi√ß√£o ${currentTime}s`);
            });
            
          } else {
            console.log(`‚ùå Arquivo ${langCode} n√£o encontrado`);
            alert(`Arquivo de √°udio em ${langCode === 'ENG' ? 'Ingl√™s' : 'Portugu√™s'} n√£o est√° dispon√≠vel ainda.\n\nO sistema est√° processando as vers√µes espec√≠ficas...`);
          }
          
        } catch (error) {
          console.error('‚ùå Erro ao trocar idioma:', error);
          alert('Erro ao trocar idioma. Tente novamente em alguns instantes.');
        }
        
        // Fechar dropdown
        document.getElementById('manual-audio-dropdown').classList.add('hidden');
      }
    }

    function setupEventListeners() {
      // Chat
      document.getElementById('send-message').addEventListener('click', sendMessage);
      document.getElementById('chat-input').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });

      // Sair da sala
      document.getElementById('leave-room').addEventListener('click', () => {
        if (confirm('Tem certeza que deseja sair da sala?')) {
          window.location.href = '/';
        }
      });
    }

    // Criar fontes de v√≠deo com fallback
    async function createVideoSources(videoSrc) {
      const sources = [];
      const filename = videoSrc.split('/').pop();
      const baseName = filename.split('.')[0];
      
      // Verificar se existem vers√µes convertidas
      try {
        const response = await fetch(`http://localhost:4000/api/videos`);
        const videos = await response.json();
        
        // Procurar por vers√µes convertidas do mesmo arquivo
        const convertedVersions = videos.filter(v => v.name.includes(baseName));
        
        // Priorizar formatos mais compat√≠veis
        const formatPriority = ['mp4', 'webm', 'ogg'];
        
        for (const format of formatPriority) {
          const convertedFile = convertedVersions.find(v => v.url.endsWith(`.${format}`));
          if (convertedFile) {
            sources.push({
              src: `http://localhost:4000${convertedFile.url}`,
              type: getMimeType(`.${format}`)
            });
          }
        }
        
        // Adicionar arquivo original como √∫ltimo recurso
        sources.push({
          src: `http://localhost:4000${videoSrc}`,
          type: getMimeType(videoSrc)
        });
        
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao buscar vers√µes convertidas, usando original:', error);
        sources.push({
          src: `http://localhost:4000${videoSrc}`,
          type: getMimeType(videoSrc)
        });
      }
      
      return sources;
    }

    function getMimeType(filename) {
      const extension = filename.split('.').pop().toLowerCase();
      const mimeTypes = {
        'mp4': 'video/mp4',
        'webm': 'video/webm',
        'ogg': 'video/ogg',
        'avi': 'video/x-msvideo',
        'mov': 'video/quicktime',
        'wmv': 'video/x-ms-wmv',
        'flv': 'video/x-flv',
        'mkv': 'video/x-matroska'
      };
      return mimeTypes[extension] || 'video/mp4';
    }

    // Fun√ß√µes auxiliares
    function sendMessage() {
      const input = document.getElementById('chat-input');
      const message = input.value.trim();
      
      if (message && socket) {
        socket.emit('chat-message', {
          roomId: roomId,
          message: message
        });
        input.value = '';
      }
    }

    function updateUsersList(users) {
      const usersList = document.getElementById('users-list');
      usersList.innerHTML = users.map(user => `
        <div class="flex items-center space-x-2 text-sm">
          <div class="w-2 h-2 bg-green-400 rounded-full"></div>
          <span class="text-gray-300">${user.username}</span>
        </div>
      `).join('');
    }

    function updateUserCount(count) {
      document.getElementById('user-count').innerHTML = `
        <i class="fas fa-users mr-2"></i>
        <span>${count} usu√°rio${count !== 1 ? 's' : ''}</span>
      `;
    }

    function loadChatMessages(messages) {
      const chatContainer = document.getElementById('chat-messages');
      chatContainer.innerHTML = '';
      messages.forEach(message => {
        addChatMessage(message.username, message.message, 'user', false);
      });
    }

    function addChatMessage(username, message, type, scroll = true) {
      const chatContainer = document.getElementById('chat-messages');
      const messageDiv = document.createElement('div');
      messageDiv.className = `animate-slide-up ${type === 'system' ? 'text-center' : ''}`;
      
      if (type === 'system') {
        messageDiv.innerHTML = `
          <span class="text-xs text-gray-500 italic">${message}</span>
        `;
      } else {
        messageDiv.innerHTML = `
          <div class="text-xs text-gray-400 mb-1">${username}</div>
          <div class="text-sm text-white bg-gray-700 rounded-lg px-3 py-2">${message}</div>
        `;
      }
      
      chatContainer.appendChild(messageDiv);
      
      if (scroll) {
        chatContainer.scrollTop = chatContainer.scrollHeight;
      }
    }

    function showSyncStatus() {
      document.getElementById('sync-status').classList.remove('hidden');
    }

    function hideSyncStatus() {
      document.getElementById('sync-status').classList.add('hidden');
    }

    // Mostrar erro de compatibilidade com solu√ß√µes
    function showVideoCompatibilityError(videoSrc) {
      const filename = videoSrc.split('/').pop();
      const isUnsupportedFormat = filename.match(/\.(mkv|avi|wmv|flv)$/i);
      
      // Remover player com erro
      if (player) {
        player.dispose();
        player = null;
      }
      
      // Criar interface de erro com solu√ß√µes
      const videoContainer = document.querySelector('.relative.bg-black');
      videoContainer.innerHTML = `
        <div class="h-full flex items-center justify-center bg-gradient-to-br from-gray-900 to-gray-800 rounded-lg">
          <div class="text-center p-8 max-w-md">
            <div class="mb-6">
              <i class="fas fa-exclamation-triangle text-6xl text-yellow-500 mb-4"></i>
              <h3 class="text-xl font-bold text-white mb-2">Formato N√£o Suportado</h3>
              <p class="text-gray-300 text-sm">
                O navegador n√£o consegue reproduzir arquivos ${isUnsupportedFormat ? isUnsupportedFormat[1].toUpperCase() : 'neste formato'}
              </p>
            </div>
            
            <div class="space-y-3">
              <button onclick="requestVideoConversion('${filename}')" 
                      class="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                <i class="fas fa-cogs mr-2"></i>Converter para MP4
              </button>
              
              <button onclick="showCompatibilityInfo()" 
                      class="w-full px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
                <i class="fas fa-info-circle mr-2"></i>Ver Formatos Suportados
              </button>
              
              <button onclick="window.location.href='/'" 
                      class="w-full px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-800 transition-colors">
                <i class="fas fa-arrow-left mr-2"></i>Voltar √† Biblioteca
              </button>
            </div>
            
            <div class="mt-6 p-4 bg-blue-900 bg-opacity-30 rounded-lg border border-blue-500">
              <p class="text-blue-200 text-xs">
                <i class="fas fa-lightbulb mr-1"></i>
                <strong>Dica:</strong> Arquivos MP4, WebM e OGG funcionam melhor em navegadores
              </p>
            </div>
          </div>
        </div>
      `;
    }
    
    // Solicitar convers√£o do v√≠deo
    window.requestVideoConversion = async function(filename) {
      try {
        const convertBtn = event.target;
        convertBtn.disabled = true;
        convertBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Convertendo...';
        
        const response = await fetch(`http://localhost:4000/api/convert/${filename}`, {
          method: 'POST'
        });
        
        if (response.ok) {
          const result = await response.json();
          
          // Mostrar sucesso e recarregar
          showConversionSuccess();
          
          // Recarregar p√°gina ap√≥s 3 segundos para usar vers√£o convertida
          setTimeout(() => {
            window.location.reload();
          }, 3000);
          
        } else {
          throw new Error('Servidor n√£o conseguiu converter o arquivo');
        }
        
      } catch (error) {
        console.error('‚ùå Erro na convers√£o:', error);
        showConversionError(error.message);
      }
    }
    
    function showConversionSuccess() {
      const videoContainer = document.querySelector('.relative.bg-black');
      videoContainer.innerHTML = `
        <div class="h-full flex items-center justify-center bg-gradient-to-br from-green-900 to-green-800 rounded-lg">
          <div class="text-center p-8">
            <i class="fas fa-check-circle text-6xl text-green-400 mb-4"></i>
            <h3 class="text-xl font-bold text-white mb-2">Convers√£o Conclu√≠da!</h3>
            <p class="text-green-200">Recarregando com vers√£o compat√≠vel...</p>
            <div class="mt-4">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-400 mx-auto"></div>
            </div>
          </div>
        </div>
      `;
    }
    
         function showConversionError(message) {
       const videoContainer = document.querySelector('.relative.bg-black');
       videoContainer.innerHTML = `
         <div class="h-full flex items-center justify-center bg-gradient-to-br from-red-900 to-red-800 rounded-lg">
           <div class="text-center p-8 max-w-lg">
             <i class="fas fa-tools text-6xl text-orange-400 mb-4"></i>
             <h3 class="text-xl font-bold text-white mb-2">FFmpeg N√£o Configurado</h3>
             <p class="text-orange-200 text-sm mb-6">${message}</p>
             
             <div class="bg-gray-900 bg-opacity-50 rounded-lg p-4 mb-6 text-left">
               <h4 class="text-white font-semibold mb-2">üìã Convers√£o Manual:</h4>
               <div class="bg-black bg-opacity-50 rounded px-3 py-2 mb-3">
                 <code class="text-green-400 text-xs">
                   ffmpeg -i "arquivo.mkv" -c:v libx264 -c:a aac "arquivo.mp4"
                 </code>
               </div>
               <p class="text-gray-300 text-xs">
                 üí° Execute no terminal e coloque o arquivo .mp4 na pasta /public/videos/
               </p>
             </div>
             
             <div class="space-y-2">
               <button onclick="copyConversionCommand()" 
                       class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                 <i class="fas fa-copy mr-2"></i>Copiar Comando FFmpeg
               </button>
               
               <button onclick="window.location.href='/'" 
                       class="w-full px-4 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-800 transition-colors">
                 <i class="fas fa-arrow-left mr-2"></i>Voltar √† Biblioteca
               </button>
             </div>
           </div>
         </div>
       `;
     }
     
     window.copyConversionCommand = function() {
       const filename = window.location.search.split('video=')[1] || 'arquivo.mkv';
       const mp4name = filename.replace(/\.[^/.]+$/, '.mp4');
       const command = `ffmpeg -i "${filename}" -c:v libx264 -c:a aac "${mp4name}"`;
       
       navigator.clipboard.writeText(command).then(() => {
         alert('‚úÖ Comando copiado! Cole no terminal para converter o v√≠deo.');
       }).catch(() => {
         prompt('üìã Comando para convers√£o (Ctrl+C para copiar):', command);
       });
     }
    
    window.showCompatibilityInfo = function() {
      alert(`üé¨ Formatos de V√≠deo Suportados pelos Navegadores:
      
‚úÖ SUPORTADOS:
‚Ä¢ MP4 (H.264 + AAC) - Recomendado
‚Ä¢ WebM (VP8/VP9 + Opus)
‚Ä¢ OGG (Theora + Vorbis)

‚ùå PROBLEM√ÅTICOS:
‚Ä¢ MKV - Suporte limitado
‚Ä¢ AVI - N√£o suportado nativamente  
‚Ä¢ WMV - Apenas Internet Explorer
‚Ä¢ FLV - Descontinuado

üí° SOLU√á√ÉO:
Use o bot√£o "Converter para MP4" para criar uma vers√£o compat√≠vel do seu v√≠deo.`);
    }

    // Cleanup ao sair da p√°gina
    window.addEventListener('beforeunload', () => {
      if (socket) {
        socket.disconnect();
      }
      if (player) {
        player.dispose();
      }
    });

    // Aguardar carregamento da p√°gina e das depend√™ncias
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', startApp);
    } else {
      startApp();
    }
  </script>
</Layout> 