---
export interface Props {
  video: {
    id: string;
    name: string;
    url: string;
    size: number;
    type: string;
    uploadDate: string;
    isOptimized?: boolean;
  };
}

const { video } = Astro.props;

// Formatar tamanho do arquivo
function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 B';
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Verificar se precisa de conversão
function needsConversion(filename: string): boolean {
  return /\.(mkv|avi|mov|wmv|flv)$/i.test(filename);
}

const formattedSize = formatFileSize(video.size);
const needsConv = needsConversion(video.name);
const isConverted = video.type === 'converted';
const isOriginal = video.type === 'original';
---

<div class="video-card glass-effect rounded-lg p-4" data-video-id={video.id}>
  <div class="flex items-start justify-between mb-3">
    <div class="flex-1 min-w-0">
      <h3 class="font-medium text-white truncate mb-1" title={video.name}>
        {video.name}
      </h3>
      <div class="flex items-center space-x-2 text-sm text-gray-400">
        <span>{formattedSize}</span>
        {isConverted && (
          <span class="px-2 py-1 bg-green-600 text-white text-xs rounded">
            Convertido
          </span>
        )}
        {needsConv && isOriginal && (
          <span class="px-2 py-1 bg-yellow-600 text-white text-xs rounded">
            Conversão recomendada
          </span>
        )}
        {video.isOptimized && (
          <span class="px-2 py-1 bg-blue-600 text-white text-xs rounded">
            Otimizado
          </span>
        )}
      </div>
    </div>
    
    <button 
      class="delete-btn opacity-0 group-hover:opacity-100 ml-2 p-2 text-red-400 hover:text-red-300 transition-all"
      data-action="delete"
      data-video-id={video.id}
      title="Excluir vídeo"
    >
      <i class="fas fa-trash text-sm"></i>
    </button>
  </div>

  <div class="video-actions flex space-x-2">
    {needsConv && isOriginal && (
      <button 
        class="convert-btn flex-1 px-3 py-2 bg-yellow-600 text-white text-sm rounded hover:bg-yellow-700 transition-colors"
        data-action="convert"
        data-video-file={video.id}
      >
        <i class="fas fa-cog mr-2"></i>Converter
      </button>
    )}
    
    <button 
      class="create-btn flex-1 px-3 py-2 bg-purple-600 text-white text-sm rounded hover:bg-purple-700 transition-colors"
      data-action="create-room"
      data-video-file={video.id}
    >
      <i class="fas fa-play mr-2"></i>Criar Sala
    </button>
  </div>
</div>

<style>
  .video-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .video-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  .video-card:hover .delete-btn {
    opacity: 1 !important;
  }

  .delete-btn {
    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }

  .convert-btn,
  .create-btn {
    transition: all 0.2s ease;
  }

  .video-card:hover .convert-btn,
  .video-card:hover .create-btn {
    animation: pulseGlow 0.5s ease-out;
  }

  @keyframes pulseGlow {
    0% {
      box-shadow: 0 0 0 0 rgba(147, 51, 234, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(147, 51, 234, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(147, 51, 234, 0);
    }
  }
</style> 